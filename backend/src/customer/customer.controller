// File: backend/src/customer/customer.controller.ts
// Version: 1.1.0 (Add getAdminCustomers controller function)

import { Request, Response, NextFunction } from 'express';
// Importa el servicio (¡Ahora ambas funciones!)
import { findActiveRewardsForCustomer, getCustomersForBusiness } from './customer.service'; // <-- Añadido getCustomersForBusiness

/**
 * Handles fetching active rewards for the logged-in customer's business.
 * GET /api/customer/rewards (o similar)
 */
export const getCustomerRewardsHandler = async (
  req: Request,
  res: Response,
  next: NextFunction
) => {
  const businessId = req.user?.businessId;
  const userId = req.user?.id;

  console.log(
    `[CUSTOMER CTRL] User ${userId} requesting rewards for business ${businessId}`
  );

  if (!businessId || !userId) {
    console.error(
      '[CUSTOMER CTRL] Error: businessId or userId missing from req.user'
    );
    return res
      .status(401) // Unauthorized o 403 Forbidden si la autenticación falló antes
      .json({
        message:
          'Información de usuario o negocio no encontrada en la sesión.',
      });
  }

  try {
    const rewards = await findActiveRewardsForCustomer(businessId);
    res.status(200).json(rewards);
  } catch (error) {
    console.error(
      `[CUSTOMER CTRL] Error fetching rewards for business ${businessId}:`,
      error
    );
    // Pasamos al manejador de errores global si existe
    next(error);
    // O devolvemos error 500 directamente
    // res.status(500).json({ message: 'Error al obtener las recompensas.' });
  }
};


// --- NUEVA FUNCIÓN AÑADIDA ---
/**
 * Controlador para que el Admin obtenga la lista de clientes de su negocio.
 * GET /admin/customers (o similar)
 */
export const getAdminCustomers = async (req: Request, res: Response, next: NextFunction) => {
    // auth.middleware ya puso req.user con businessId
    // @ts-ignore // Si req.user no está bien tipado globalmente aún
    const adminBusinessId = req.user?.businessId;

    if (!adminBusinessId) {
        console.error("[CUST CTRL] No businessId found in req.user for admin.");
        return res.status(403).json({ message: "No se pudo identificar el negocio del administrador." });
    }

    console.log(`[CUST CTRL] Request received for admin customers for business: ${adminBusinessId}`);

    try {
        // Llamamos a la función del servicio
        const customers = await getCustomersForBusiness(adminBusinessId);

        // Respuesta con paginación placeholder
        const responseData = {
            items: customers,
            currentPage: 1, // Fijo por ahora
            totalPages: 1,  // Fijo por ahora
            totalItems: customers.length
        };

        console.log(`[CUST CTRL] Sending ${customers.length} customers.`);
        res.status(200).json(responseData);

    } catch (error) {
         console.error("[CUST CTRL] Error in getAdminCustomers controller:", error);
         next(error); // Pasar al manejador de errores
    }
};
// --- FIN NUEVA FUNCIÓN ---


// End of File: backend/src/customer/customer.controller.ts