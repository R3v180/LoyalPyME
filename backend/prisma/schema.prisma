// backend/prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
  // Para quitar el warning de "output path" que viste antes, puedes añadir:
  // output   = "./node_modules/.prisma/client" 
  // Si la ruta relativa desde schema.prisma a node_modules/.prisma/client es esa.
  // Si tu schema.prisma está en backend/prisma/ y node_modules está en backend/,
  // entonces sería: output = "../node_modules/.prisma/client"
  // Por ahora, lo dejaremos comentado para centrarnos en el seed.

  // --- AÑADIR ESTA LÍNEA PARA EL SEED ---
  // Le dice a Prisma cómo ejecutar el script de seed.
  // Usamos npx para asegurar que ts-node se encuentra si no está global.
  // La ruta a seed.ts es relativa al schema.prisma.
  previewFeatures = ["clientExtensions", "postgresqlExtensions"] // Mantén esto si ya lo tenías
  // Asegúrate que solo hay UN `previewFeatures`
  // La línea importante es la siguiente:
  // seed = "npx ts-node --compiler-options \"{\\\"module\\\":\\\"commonjs\\\"}\" ./seed.ts"
  // PERO Prisma a veces tiene problemas con rutas relativas directas así para el seed.
  // La forma más robusta cuando el `package.json` no funciona es un script ejecutable.
  // Vamos a intentar la forma que Prisma espera para scripts TS, que es a través del package.json.
  // Dado que la entrada en package.json no parece ser recogida automáticamente por `npx prisma db seed`,
  // hay una posible confusión en cómo Prisma CLI localiza el package.json correcto o interpreta esa sección.

  // VAMOS A QUITAR CUALQUIER DIRECTIVA `seed = "..."` DE AQUÍ POR AHORA.
  // El problema debe ser que `npx prisma db seed` no está "viendo" el package.json de la carpeta `backend`
  // cuando lo ejecutas desde `backend/`.
  // Si el `package.json` que modificamos con la sección "prisma" está en `D:\proyectos\loyalpyme\backend\package.json`
  // y ejecutas `npx prisma db seed` desde `D:\proyectos\loyalpyme\backend\`, debería funcionar.

  // La advertencia "You did not specify an output path..." es para el generador, no para el seed.
  // Podemos añadir el output para quitarla, no afectará al seed:
  output   = "../node_modules/.prisma/client" // Ajusta si tu node_modules está en otro nivel
}


datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ---------- ENUMS ----------
enum UserRole {
  BUSINESS_ADMIN
  CUSTOMER_FINAL
  SUPER_ADMIN
}

enum DocumentType {
  DNI
  NIE
  PASSPORT
  OTHER
}

enum QrCodeStatus {
  PENDING
  COMPLETED
  EXPIRED
  CANCELLED
}

enum TierCalculationBasis {
  SPEND
  VISITS
  POINTS_EARNED
}

enum TierDowngradePolicy {
  NEVER
  PERIODIC_REVIEW
  AFTER_INACTIVITY
}

enum BenefitType {
  POINTS_MULTIPLIER
  EXCLUSIVE_REWARD_ACCESS
  CUSTOM_BENEFIT
}

enum ActivityType {
  POINTS_EARNED_QR
  POINTS_REDEEMED_REWARD
  GIFT_REDEEMED
  POINTS_ADJUSTED_ADMIN
  TIER_UPGRADE
  TIER_DOWNGRADE
}


// ---------- MODELS ----------
model Business {
  id                          String    @id @default(uuid())
  name                        String
  slug                        String    @unique
  logoUrl                     String?
  brandingColorPrimary        String?   @default("#007bff")
  brandingColorSecondary      String?   @default("#6c757d")
  pointsPerEuro               Float     @default(1)
  // qrCodeExpirationMinutes     Int       @default(30) // Este campo no estaba en el schema original, si lo necesitas, descomenta y migra
  tierSystemEnabled           Boolean   @default(false)
  tierCalculationBasis        TierCalculationBasis?
  tierCalculationPeriodMonths Int?      @default(0)
  tierDowngradePolicy         TierDowngradePolicy @default(NEVER)
  inactivityPeriodMonths      Int?      @default(6)
  isActive                    Boolean   @default(true)
  isLoyaltyCoreActive         Boolean   @default(false)
  isCamareroActive            Boolean   @default(false)
  users                       User[]
  rewards                     Reward[]
  qrCodes                     QrCode[]
  tiers                       Tier[]
  activityLogs                ActivityLog[]
  grantedRewards              GrantedReward[]
  createdAt                   DateTime  @default(now())
  updatedAt                   DateTime  @updatedAt
}


model User {
  id                    String        @id @default(uuid())
  email                 String        @unique
  password              String
  name                  String?
  phone                 String?       @unique
  documentId            String?       @unique
  documentType          DocumentType?
  role                  UserRole
  points                Int           @default(0)
  totalSpend            Float         @default(0)
  totalVisits           Int           @default(0)
  tierAchievedAt        DateTime?
  lastActivityAt        DateTime?
  resetPasswordToken    String?       @map("reset_password_token")
  resetPasswordExpires  DateTime?     @map("reset_password_expires_at")
  isActive              Boolean       @default(true)
  isFavorite            Boolean?      @default(false)
  adminNotes            String?       @db.Text
  businessId            String?
  business              Business?     @relation(fields: [businessId], references: [id], onDelete: Cascade)
  qrcodesUsed           QrCode[]
  activityLogs          ActivityLog[]
  currentTierId         String?
  currentTier           Tier?         @relation(fields: [currentTierId], references: [id], onDelete: SetNull)
  grantedRewards        GrantedReward[] @relation("CustomerGrantedRewards")
  assignedRewards       GrantedReward[] @relation("AdminAssignedRewards")
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  @@index([businessId])
  @@index([currentTierId])
}

model Reward {
  id             String   @id @default(uuid())
  name_es        String?
  name_en        String?
  description_es String?  @db.Text
  description_en String?  @db.Text
  pointsCost     Int
  isActive       Boolean  @default(true)
  imageUrl       String?
  businessId     String
  business       Business @relation(fields: [businessId], references: [id])
  grantedRewards GrantedReward[]
  activityLogs   ActivityLog[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  @@unique([businessId, name_es], name: "unique_reward_name_es_business")
  @@unique([businessId, name_en], name: "unique_reward_name_en_business")
  @@index([businessId])
}

model QrCode {
  id           String        @id @default(uuid())
  token        String        @unique
  businessId   String
  business     Business      @relation(fields: [businessId], references: [id])
  amount       Float
  ticketNumber String
  pointsEarned Int?
  status       QrCodeStatus  @default(PENDING)
  expiresAt    DateTime
  userId       String?
  user         User?         @relation(fields: [userId], references: [id])
  completedAt  DateTime?
  activityLogs ActivityLog[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  @@index([businessId])
  @@index([userId])
}

model Tier {
  id                  String        @id @default(uuid())
  name                String
  level               Int
  minValue            Float
  description         String?       @db.Text
  benefitsDescription String?       @db.Text
  isActive            Boolean       @default(true)
  businessId          String
  business            Business      @relation(fields: [businessId], references: [id])
  users               User[]
  benefits            TierBenefit[]
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  @@unique([businessId, name])
  @@unique([businessId, level])
  @@index([businessId])
}

model TierBenefit {
  id          String      @id @default(uuid())
  tierId      String
  tier        Tier        @relation(fields: [tierId], references: [id], onDelete: Cascade)
  type        BenefitType
  value       String
  description String?     @db.Text
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  @@index([tierId])
}

model ActivityLog {
  id                       String        @id @default(uuid())
  userId                   String
  user                     User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  businessId               String
  business                 Business      @relation(fields: [businessId], references: [id])
  type                     ActivityType
  pointsChanged            Int?
  description              String?       @db.Text
  relatedRewardId          String?
  relatedReward            Reward?       @relation(fields: [relatedRewardId], references: [id], onDelete: SetNull)
  relatedQrId              String?
  relatedQr                QrCode?       @relation(fields: [relatedQrId], references: [id], onDelete: SetNull)
  relatedGrantedRewardId   String?
  relatedGrantedReward     GrantedReward? @relation(fields: [relatedGrantedRewardId], references: [id], onDelete: SetNull)
  createdAt                DateTime      @default(now())
  @@index([userId])
  @@index([businessId])
  @@index([type])
  @@index([relatedRewardId])
  @@index([relatedQrId])
  @@index([relatedGrantedRewardId])
}

model GrantedReward {
  id            String    @id @default(uuid())
  userId        String
  user          User      @relation("CustomerGrantedRewards", fields: [userId], references: [id])
  rewardId      String
  reward        Reward    @relation(fields: [rewardId], references: [id])
  businessId    String
  business      Business  @relation(fields: [businessId], references: [id])
  assignedById  String?
  assignedBy    User?     @relation("AdminAssignedRewards", fields: [assignedById], references: [id])
  status        String    @default("PENDING")
  assignedAt    DateTime  @default(now())
  redeemedAt    DateTime?
  expiresAt     DateTime?
  activityLog   ActivityLog[]
  @@index([userId])
  @@index([rewardId])
  @@index([assignedById])
  @@index([businessId])
}