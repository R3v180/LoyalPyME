// filename: backend/prisma/schema.prisma
// Version: 1.1.2 (Add inverse relations for ActivityLog)

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client" // Especificar output
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --- ENUMS ---

enum UserRole {
  SUPER_ADMIN
  BUSINESS_ADMIN
  CUSTOMER_FINAL
}

enum DocumentType {
  DNI
  NIE
  PASSPORT
  OTHER
}

enum QrCodeStatus {
  PENDING
  COMPLETED
  EXPIRED
}

// Tier System Enums
enum TierCalculationBasis {
  SPEND
  VISITS
  POINTS_EARNED
}

enum TierDowngradePolicy {
  NEVER
  PERIODIC_REVIEW
  AFTER_INACTIVITY
}

enum BenefitType {
  POINTS_MULTIPLIER
  EXCLUSIVE_REWARD_ACCESS
  CUSTOM_BENEFIT
}

// --- MODELS ---

model Business {
  id                 String    @id @default(uuid())
  name               String
  slug               String    @unique
  isActive           Boolean   @default(true)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  pointsPerEuro      Float     @default(1.0)
  currency           String    @default("EUR")
  brandingColor      String?
  subscriptionStatus String    @default("trial")
  trialEndsAt        DateTime?
  lastPaymentDate    DateTime?

  // Tier System Fields
  tierSystemEnabled           Boolean?              @default(false)
  tierCalculationBasis        TierCalculationBasis?
  tierCalculationPeriodMonths Int?
  tierDowngradePolicy         TierDowngradePolicy?  @default(NEVER)
  inactivityPeriodMonths      Int?

  // Relationships
  users          User[]
  rewards        Reward[]
  qrCodes        QrCode[]
  grantedRewards GrantedReward[]
  tiers          Tier[]
  activityLogs   ActivityLog[] // <-- Línea añadida para relación inversa

  @@map("businesses")
}

model User {
  id                   String        @id @default(uuid())
  email                String        @unique
  password             String
  name                 String?
  phone                String?       @unique
  role                 UserRole
  isActive             Boolean       @default(true)
  isFavorite           Boolean       @default(false)
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
  businessId           String
  points               Int           @default(0)
  marketingOptIn       Boolean       @default(false)
  documentId           String?       @unique
  documentType         DocumentType?
  resetPasswordToken   String?       @unique
  resetPasswordExpires DateTime?
  adminNotes           String?

  // Tier System Fields
  currentTierId     String?
  tierAchievedAt    DateTime?
  lastActivityAt    DateTime?
  totalSpend        Float?    @default(0)
  totalVisits       Int?      @default(0)
  totalPointsEarned Int?      @default(0)

  // Relationships
  business               Business        @relation(fields: [businessId], references: [id], onDelete: Cascade)
  qrCodes                QrCode[]
  currentTier            Tier?           @relation(fields: [currentTierId], references: [id], onDelete: SetNull)
  grantedRewards         GrantedReward[] @relation("UserGrantedRewards")
  assignedGrantedRewards GrantedReward[] @relation("AdminGrantedRewards")
  activityLogs           ActivityLog[] // <-- Línea añadida para relación inversa

  @@map("users")
}

model Reward {
  id          String   @id @default(uuid())
  businessId  String
  name        String
  description String?
  pointsCost  Int
  isActive    Boolean  @default(true)
  imageUrl    String? // Campo añadido previamente
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  business         Business        @relation(fields: [businessId], references: [id], onDelete: Cascade)
  grantedInstances GrantedReward[]

  @@unique([businessId, name])
  @@map("rewards")
}

model QrCode {
  id           String       @id @default(uuid())
  token        String       @unique
  businessId   String
  amount       Float
  ticketNumber String
  status       QrCodeStatus @default(PENDING)
  createdAt    DateTime     @default(now())
  expiresAt    DateTime
  completedAt  DateTime?
  userId       String?
  pointsEarned Int?

  // Relationships
  business Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
  user     User?    @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("qr_codes")
}

model Tier {
  id                  String   @id @default(uuid())
  businessId          String
  name                String
  level               Int
  minValue            Float
  description         String?
  benefitsDescription String?
  isActive            Boolean  @default(true)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  // Relationships
  business Business      @relation(fields: [businessId], references: [id], onDelete: Cascade)
  users    User[]
  benefits TierBenefit[]

  @@unique([businessId, level])
  @@unique([businessId, name])
}

model TierBenefit {
  id          String      @id @default(uuid())
  tierId      String
  type        BenefitType
  value       String
  description String?
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relationships
  tier Tier @relation(fields: [tierId], references: [id], onDelete: Cascade)
}

model GrantedReward {
  id           String    @id @default(uuid())
  userId       String
  rewardId     String
  businessId   String
  assignedById String
  assignedAt   DateTime  @default(now())
  status       String    @default("PENDING")
  redeemedAt   DateTime?

  // Relaciones
  user       User     @relation("UserGrantedRewards", fields: [userId], references: [id], onDelete: Cascade)
  reward     Reward   @relation(fields: [rewardId], references: [id], onDelete: Cascade)
  business   Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
  assignedBy User     @relation("AdminGrantedRewards", fields: [assignedById], references: [id], onDelete: Restrict)

  @@map("granted_rewards")
}

// --- Añadido para Historial de Actividad ---

// Define los tipos de eventos que se registrarán
enum ActivityType {
  POINTS_EARNED_QR // Puntos ganados por escanear QR
  POINTS_REDEEMED_REWARD // Puntos gastados al canjear recompensa por puntos
  GIFT_REDEEMED // Regalo (GrantedReward) canjeado
  POINTS_ADJUSTED_ADMIN // Puntos añadidos/quitados manualmente por admin
}

// Modelo para registrar cada evento/transacción del historial
model ActivityLog {
  id                     String       @id @default(uuid())
  userId                 String // ID del usuario cliente
  user                   User         @relation(fields: [userId], references: [id], onDelete: Cascade) // Relación con User
  businessId             String // ID del negocio (para filtrar/scope)
  business               Business     @relation(fields: [businessId], references: [id], onDelete: Cascade)
  type                   ActivityType // Un Enum para el tipo de evento
  pointsChanged          Int? // Puntos ganados (+) o gastados (-) (null si no aplica, ej: canje regalo)
  description            String? // Descripción textual
  relatedQrId            String?
  relatedRewardId        String?
  relatedGrantedRewardId String?
  createdAt              DateTime     @default(now()) // Fecha del evento

  // Indices para mejorar rendimiento
  @@index([userId, createdAt])
  @@index([businessId])
}

// --- Fin Añadido ---
