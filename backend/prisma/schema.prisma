// backend/prisma/schema.prisma
// Version: 20240618.7 - Final with LF line endings

generator client {
  provider        = "prisma-client-js"
  output          = "../node_modules/.prisma/client"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ---------- ENUMS ----------

enum UserRole {
  SUPER_ADMIN
  BUSINESS_ADMIN
  CUSTOMER_FINAL
  WAITER
  KITCHEN_STAFF
  BAR_STAFF
}

enum DocumentType {
  DNI
  NIE
  PASSPORT
  OTHER
}

enum QrCodeStatus {
  PENDING
  COMPLETED
  EXPIRED
  CANCELLED
}

enum TierCalculationBasis {
  SPEND
  VISITS
  POINTS_EARNED
}

enum TierDowngradePolicy {
  NEVER
  PERIODIC_REVIEW
  AFTER_INACTIVITY
}

enum BenefitType {
  POINTS_MULTIPLIER
  EXCLUSIVE_REWARD_ACCESS
  CUSTOM_BENEFIT
}

enum ActivityType {
  POINTS_EARNED_QR
  POINTS_REDEEMED_REWARD
  GIFT_REDEEMED
  POINTS_ADJUSTED_ADMIN
  TIER_UPGRADE
  TIER_DOWNGRADE
  POINTS_EARNED_ORDER_LC
}

enum OrderStatus {
  RECEIVED
  IN_PROGRESS
  PARTIALLY_READY
  ALL_ITEMS_READY
  COMPLETED
  PENDING_PAYMENT
  PAID
  CANCELLED
  PAYMENT_FAILED
}

enum OrderItemStatus {
  PENDING_KDS
  PREPARING
  READY
  SERVED
  CANCELLED
  CANCELLATION_REQUESTED
}

enum OrderType {
  DINE_IN
  TAKE_AWAY
  DELIVERY
}

enum TableNotificationType {
  CALL_WAITER
  REQUEST_BILL
}

enum ReservationStatus {
  PENDING
  CONFIRMED
  CANCELLED
  SEATED
  COMPLETED
  NO_SHOW
}

enum TableStatus {
  AVAILABLE
  OCCUPIED
  PENDING_PAYMENT_TABLE
  NEEDS_CLEANING
  RESERVED
}

enum SuperAdminActionType {
  BUSINESS_STATUS_TOGGLED
  MODULE_LOYALTY_TOGGLED
  MODULE_CAMARERO_TOGGLED
  SUBSCRIPTION_PRICE_UPDATED
  MANUAL_PAYMENT_RECORDED
  IMPERSONATION_STARTED
  IMPERSONATION_ENDED
}

/// Clasifica el comportamiento fundamental de una recompensa.
enum RewardType {
  /// Un producto específico del menú se añade gratis al carrito.
  MENU_ITEM
  /// Un descuento (fijo o %) se aplica a UN solo ítem del carrito.
  DISCOUNT_ON_ITEM
  /// Un descuento (fijo o %) se aplica al TOTAL del pedido.
  DISCOUNT_ON_TOTAL
}

/// Especifica si un descuento es un porcentaje o una cantidad monetaria fija.
enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
}


// ---------- MODELS ----------

model Business {
  id                        String                  @id @default(uuid())
  name                      String
  slug                      String                  @unique
  logoUrl                   String?
  brandingColorPrimary      String?                 @default("#007bff")
  brandingColorSecondary    String?                 @default("#6c757d")
  pointsPerEuro             Float                   @default(1)
  qrCodeExpirationMinutes   Int                     @default(30)
  tierSystemEnabled         Boolean                 @default(false)
  tierCalculationBasis      TierCalculationBasis?
  tierCalculationPeriodMonths Int?                    @default(0)
  tierDowngradePolicy       TierDowngradePolicy     @default(NEVER)
  inactivityPeriodMonths    Int?                    @default(6)
  isActive                  Boolean                 @default(true)
  isLoyaltyCoreActive       Boolean                 @default(false)
  isCamareroActive          Boolean                 @default(false)
  monthlyPrice              Decimal?                @default(0.00) @db.Decimal(10, 2)
  currency                  String                  @default("EUR")
  users                     User[]
  rewards                   Reward[]
  qrCodes                   QrCode[]
  tiers                     Tier[]
  activityLogs              ActivityLog[]
  grantedRewards            GrantedReward[]
  tables                    Table[]                 @relation("BusinessTables")
  menuCategories            MenuCategory[]          @relation("BusinessMenuCategories")
  menuItems                 MenuItem[]              @relation("BusinessMenuItems")
  modifierGroups            ModifierGroup[]         @relation("BusinessModifierGroups")
  orders                    Order[]                 @relation("BusinessOrders")
  staffPins                 StaffPin[]              @relation("BusinessStaffPins")
  tableNotifications        TableNotification[]
  reservations              Reservation[]
  payments                  BusinessPayment[]       @relation("BusinessPayments")
  auditLogEntries           SuperAdminActivityLog[] @relation("TargetBusiness")
  createdAt                 DateTime                @default(now())
  updatedAt                 DateTime                @updatedAt

  @@map("businesses")
}

model User {
  id                   String       @id @default(uuid())
  email                String       @unique
  password             String
  name                 String?
  phone                String?      @unique
  documentId           String?      @unique
  documentType         DocumentType?
  role                 UserRole
  points               Int          @default(0)
  totalSpend           Float        @default(0)
  totalVisits          Int          @default(0)
  tierAchievedAt       DateTime?
  lastActivityAt       DateTime?
  resetPasswordToken   String?      @map("reset_password_token")
  resetPasswordExpires DateTime?    @map("reset_password_expires_at")
  isActive             Boolean      @default(true)
  isFavorite           Boolean?     @default(false)
  adminNotes           String?      @db.Text
  businessId           String?
  business             Business?    @relation(fields: [businessId], references: [id], onDelete: Cascade)
  qrcodesUsed          QrCode[]
  activityLogs         ActivityLog[]
  currentTierId        String?
  currentTier          Tier?        @relation(fields: [currentTierId], references: [id], onDelete: SetNull)
  grantedRewards       GrantedReward[] @relation("CustomerGrantedRewards")
  assignedRewards      GrantedReward[] @relation("AdminAssignedRewards")
  waiterTakenOrders    Order[]      @relation("WaiterTakenOrders")
  itemsServedByWaiter  OrderItem[]  @relation("ItemsServedByStaff")
  ordersPaidByStaff    Order[]      @relation("OrdersPaidByStaff")
  customerLCOrders     Order[]      @relation("CustomerLCOrders")
  staffPin             StaffPin?    @relation("UserStaffPin")
  resolvedTableNotifications TableNotification[] @relation("ResolvedTableNotifications")
  customerReservations Reservation[] @relation("CustomerReservations")
  recordedPayments     BusinessPayment[] @relation("RecordedPayments")
  superAdminActivities SuperAdminActivityLog[] @relation("AdminActionBy")
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt

  @@index([businessId])
  @@index([currentTierId])
}

model Reward {
  id                 String       @id @default(cuid())
  businessId         String
  business           Business     @relation(fields: [businessId], references: [id], onDelete: Cascade)
  name_es            String
  name_en            String?
  description_es     String?      @db.Text
  description_en     String?      @db.Text
  imageUrl           String?
  pointsCost         Int
  isActive           Boolean      @default(true)
  type               RewardType   @default(DISCOUNT_ON_TOTAL)
  discountType       DiscountType?
  discountValue      Decimal?     @db.Decimal(10, 2)
  validFrom          DateTime?
  validUntil         DateTime?
  usageLimit         Int?
  usageLimitPerUser  Int?
  requiredTierId     String?
  requiredTier       Tier?        @relation(fields: [requiredTierId], references: [id], onDelete: SetNull)
  isStackable        Boolean      @default(false)
  linkedMenuItemId   String?
  linkedMenuItem     MenuItem?    @relation("MenuItemAsRewardTarget", fields: [linkedMenuItemId], references: [id], onDelete: SetNull)
  grantedRewards     GrantedReward[]
  activityLogs       ActivityLog[]
  orders             Order[]      @relation("OrderDiscountReward")
  orderItems         OrderItem[]  @relation("RedeemedWithReward")
  orderItemsDiscounted OrderItem[]  @relation("DiscountedWithReward")
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt

  @@unique([businessId, name_es], name: "unique_reward_name_es_business")
  @@index([businessId, isActive, type])
}

model MenuItem {
  id                   String        @id @default(uuid())
  sku                  String?
  name_es              String
  name_en              String?
  description_es       String?       @db.Text
  description_en       String?       @db.Text
  price                Decimal       @db.Decimal(10, 2)
  imageUrl             String?
  allergens            String[]
  tags                 String[]
  isAvailable          Boolean       @default(true)
  position             Int           @default(0)
  preparationTime      Int?
  calories             Int?
  kdsDestination       String?
  categoryId           String
  category             MenuCategory  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  businessId           String
  business             Business      @relation("BusinessMenuItems", fields: [businessId], references: [id])
  modifierGroups       ModifierGroup[]
  orderItems           OrderItem[]   @relation("MenuItemOrderItems")
  rewardsLinkingToThis Reward[]      @relation("MenuItemAsRewardTarget")
  trackInventory       Boolean       @default(false)
  stockQuantity        Int?
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt

  @@unique([categoryId, name_es])
  @@unique([businessId, sku], name: "unique_business_sku")
  @@index([businessId])
  @@index([categoryId])
  @@index([isAvailable])
  @@index([sku])
}

model Order {
  id                                String      @id @default(cuid())
  orderNumber                         String
  status                              OrderStatus @default(RECEIVED)
  totalAmount                         Decimal     @default(0.00) @db.Decimal(10, 2)
  discountAmount                      Decimal?    @db.Decimal(10, 2)
  finalAmount                         Decimal?    @db.Decimal(10, 2)
  notes                               String?     @db.Text
  source                              String      @default("CUSTOMER_APP")
  tableId                             String?
  table                               Table?      @relation("TableOrders", fields: [tableId], references: [id], onDelete: SetNull)
  customerLCoId                       String?
  customerLCo                         User?       @relation("CustomerLCOrders", fields: [customerLCoId], references: [id], onDelete: SetNull)
  waiterId                            String?
  waiter                              User?       @relation("WaiterTakenOrders", fields: [waiterId], references: [id], onDelete: SetNull)
  businessId                          String
  business                            Business    @relation("BusinessOrders", fields: [businessId], references: [id], onDelete: Cascade)
  items                               OrderItem[] @relation("OrderOrderItems")
  appliedLcoRewardId                String?
  appliedLcoReward                  Reward?     @relation("OrderDiscountReward", fields: [appliedLcoRewardId], references: [id], onDelete: SetNull)
  appliedLcoRewardDiscountAmount    Decimal?    @db.Decimal(10, 2)
  appliedLcoTierBenefitDiscountAmount Float?
  activityLog                         ActivityLog[]
  isBillRequested                     Boolean     @default(false)
  paidByUserId                        String?
  paidByUser                          User?       @relation("OrdersPaidByStaff", fields: [paidByUserId], references: [id], onDelete: SetNull)
  paymentMethodUsed                   String?
  createdAt                           DateTime    @default(now())
  updatedAt                           DateTime    @updatedAt
  confirmedAt                         DateTime?
  billedAt                            DateTime?
  paidAt                              DateTime?
  orderType                           OrderType   @default(DINE_IN)
  paymentMethodPreference             String?
  amountToPayWith                     String?
  paymentIntentId                     String?
  paymentProvider                     String?
  deliveryAddressJson                 String?
  deliveryFee                         Float?
  estimatedDeliveryTime               DateTime?

  @@unique([businessId, orderNumber])
  @@index([businessId, status])
  @@index([tableId])
  @@index([customerLCoId])
  @@index([waiterId])
  @@index([orderType])
  @@index([paidByUserId])
}

model OrderItem {
  id                        String                    @id @default(cuid())
  quantity                  Int                       @default(1)
  priceAtPurchase           Decimal                   @db.Decimal(10, 2)
  totalItemPrice            Decimal                   @db.Decimal(10, 2)
  notes                     String?                   @db.Text
  status                    OrderItemStatus           @default(PENDING_KDS)
  kdsDestination            String?
  orderId                   String
  order                     Order                     @relation("OrderOrderItems", fields: [orderId], references: [id], onDelete: Cascade)
  menuItemId                String?
  menuItem                  MenuItem?                 @relation("MenuItemOrderItems", fields: [menuItemId], references: [id], onDelete: SetNull)
  itemNameSnapshot          String?
  itemDescriptionSnapshot   String?
  servedById                String?
  servedBy                  User?                     @relation("ItemsServedByStaff", fields: [servedById], references: [id], onDelete: SetNull)
  preparedAt                DateTime?
  servedAt                  DateTime?
  cancellationReason        String?
  redeemedRewardId          String?
  redeemedReward          Reward?                   @relation("RedeemedWithReward", fields: [redeemedRewardId], references: [id], onDelete: SetNull)
  appliedDiscountRewardId   String?
  appliedDiscountReward     Reward?                   @relation("DiscountedWithReward", fields: [appliedDiscountRewardId], references: [id], onDelete: SetNull)
  appliedDiscountAmount     Decimal?                  @db.Decimal(10, 2)
  selectedModifiers         OrderItemModifierOption[] @relation("OrderItemWithOptions")
  createdAt                 DateTime                  @default(now())
  updatedAt                 DateTime                  @updatedAt

  @@index([orderId])
  @@index([menuItemId])
  @@index([servedById])
  @@index([status])
  @@index([kdsDestination])
}

model BusinessPayment {
  id                String   @id @default(cuid())
  paymentDate       DateTime @default(now())
  amountPaid        Decimal  @db.Decimal(10, 2)
  month             Int
  year              Int
  paymentMethod     String?
  notes             String?  @db.Text
  businessId        String
  business          Business @relation("BusinessPayments", fields: [businessId], references: [id], onDelete: Cascade)
  recordedByAdminId String
  recordedBy        User     @relation("RecordedPayments", fields: [recordedByAdminId], references: [id], onDelete: Restrict)

  @@unique([businessId, year, month])
  @@index([businessId])
  @@index([recordedByAdminId])
  @@map("business_payments")
}

model SuperAdminActivityLog {
  id               String               @id @default(cuid())
  timestamp        DateTime             @default(now())
  actionType       SuperAdminActionType
  details          Json?
  adminUserId      String
  adminUser        User                 @relation("AdminActionBy", fields: [adminUserId], references: [id], onDelete: Restrict)
  targetBusinessId String?
  targetBusiness   Business?            @relation("TargetBusiness", fields: [targetBusinessId], references: [id], onDelete: SetNull)

  @@index([adminUserId])
  @@index([targetBusinessId])
  @@index([actionType])
  @@map("superadmin_activity_logs")
}

model QrCode {
  id           String       @id @default(uuid())
  token        String       @unique
  businessId   String
  business     Business     @relation(fields: [businessId], references: [id], onDelete: Cascade)
  amount       Float
  ticketNumber String
  pointsEarned Int?
  status       QrCodeStatus @default(PENDING)
  expiresAt    DateTime
  userId       String?
  user         User?        @relation(fields: [userId], references: [id], onDelete: SetNull)
  completedAt  DateTime?
  activityLogs ActivityLog[]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  @@index([businessId])
  @@index([userId])
}

model Tier {
  id                  String        @id @default(uuid())
  name                String
  level               Int
  minValue            Float
  description         String?       @db.Text
  benefitsDescription String?       @db.Text
  isActive            Boolean       @default(true)
  businessId          String
  business            Business      @relation(fields: [businessId], references: [id], onDelete: Cascade)
  users               User[]
  benefits            TierBenefit[]
  rewards             Reward[]

  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  
  @@unique([businessId, name])
  @@unique([businessId, level])
  @@index([businessId])
}

model TierBenefit {
  id          String      @id @default(uuid())
  tierId      String
  tier        Tier        @relation(fields: [tierId], references: [id], onDelete: Cascade)
  type        BenefitType
  value       String
  description String?     @db.Text
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([tierId])
}

model ActivityLog {
  id                     String         @id @default(uuid())
  userId                 String
  user                   User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  businessId             String
  business               Business       @relation(fields: [businessId], references: [id], onDelete: Cascade)
  type                   ActivityType
  pointsChanged          Int?
  description            String?        @db.Text
  relatedRewardId        String?
  relatedReward          Reward?        @relation(fields: [relatedRewardId], references: [id], onDelete: SetNull)
  relatedQrId            String?
  relatedQr              QrCode?        @relation(fields: [relatedQrId], references: [id], onDelete: SetNull)
  relatedGrantedRewardId String?
  relatedGrantedReward   GrantedReward? @relation(fields: [relatedGrantedRewardId], references: [id], onDelete: SetNull)
  relatedOrderId         String?
  relatedOrder           Order?         @relation(fields: [relatedOrderId], references: [id], onDelete: SetNull)
  createdAt              DateTime       @default(now())

  @@index([userId])
  @@index([businessId])
  @@index([type])
  @@index([relatedRewardId])
  @@index([relatedQrId])
  @@index([relatedGrantedRewardId])
  @@index([relatedOrderId])
}

model GrantedReward {
  id           String      @id @default(cuid())
  userId       String
  user         User        @relation("CustomerGrantedRewards", fields: [userId], references: [id], onDelete: Cascade)
  rewardId     String
  reward       Reward      @relation(fields: [rewardId], references: [id], onDelete: Cascade)
  businessId   String
  business     Business    @relation(fields: [businessId], references: [id], onDelete: Cascade)
  assignedById String?
  assignedBy   User?       @relation("AdminAssignedRewards", fields: [assignedById], references: [id], onDelete: SetNull)
  status       String      @default("PENDING")
  assignedAt   DateTime    @default(now())
  redeemedAt   DateTime?
  expiresAt    DateTime?
  activityLog  ActivityLog[]

  @@index([userId])
  @@index([rewardId])
  @@index([assignedById])
  @@index([businessId])
}

model Table {
  id                 String              @id @default(uuid())
  identifier         String
  zone               String?
  capacity           Int?
  description        String?
  isActive           Boolean             @default(true)
  businessId         String
  business           Business            @relation("BusinessTables", fields: [businessId], references: [id], onDelete: Cascade)
  orders             Order[]             @relation("TableOrders")
  tableNotifications TableNotification[]
  reservations       Reservation[]
  status             TableStatus         @default(AVAILABLE)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt

  @@unique([businessId, identifier])
  @@index([businessId])
  @@index([businessId, status])
}

model MenuCategory {
  id             String     @id @default(uuid())
  name_es        String
  name_en        String?
  description_es String?    @db.Text
  description_en String?    @db.Text
  imageUrl       String?
  position       Int        @default(0)
  isActive       Boolean    @default(true)
  businessId     String
  business       Business   @relation("BusinessMenuCategories", fields: [businessId], references: [id], onDelete: Cascade)
  items          MenuItem[]
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  @@unique([businessId, name_es])
  @@index([businessId])
}

model ModifierGroup {
  id            String           @id @default(cuid())
  name_es       String
  name_en       String?
  uiType        String           @default("RADIO")
  minSelections Int              @default(0)
  maxSelections Int              @default(1)
  position      Int              @default(0)
  isRequired    Boolean          @default(false)
  menuItemId    String
  menuItem      MenuItem         @relation(fields: [menuItemId], references: [id], onDelete: Cascade)
  businessId    String
  business      Business         @relation("BusinessModifierGroups", fields: [businessId], references: [id], onDelete: Cascade)
  options       ModifierOption[]
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt

  @@unique([menuItemId, name_es])
  @@index([menuItemId])
  @@index([businessId])
}

model ModifierOption {
  id                        String                    @id @default(cuid())
  name_es                   String
  name_en                   String?
  priceAdjustment           Decimal                   @default(0.00) @db.Decimal(10, 2)
  position                  Int                       @default(0)
  isDefault                 Boolean                   @default(false)
  isAvailable               Boolean                   @default(true)
  groupId                   String
  group                     ModifierGroup             @relation(fields: [groupId], references: [id], onDelete: Cascade)
  orderItemModifierOptions OrderItemModifierOption[] @relation("OptionInOrderItems")
  createdAt                 DateTime                  @default(now())
  updatedAt                 DateTime                  @updatedAt

  @@unique([groupId, name_es])
  @@index([groupId])
}

model OrderItemModifierOption {
  orderItemId                   String
  orderItem                     OrderItem      @relation("OrderItemWithOptions", fields: [orderItemId], references: [id], onDelete: Cascade)
  modifierOptionId              String
  modifierOption                ModifierOption @relation("OptionInOrderItems", fields: [modifierOptionId], references: [id], onDelete: Cascade)
  optionNameSnapshot            String?
  optionPriceAdjustmentSnapshot Decimal?       @db.Decimal(10, 2)
  createdAt                     DateTime       @default(now())

  @@id([orderItemId, modifierOptionId])
  @@index([orderItemId])
  @@index([modifierOptionId])
}

model StaffPin {
  id          String   @id @default(uuid())
  pinHash     String
  description String?
  isActive    Boolean  @default(true)
  userId      String   @unique
  user        User     @relation("UserStaffPin", fields: [userId], references: [id], onDelete: Cascade)
  businessId  String
  business    Business @relation("BusinessStaffPins", fields: [businessId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([businessId])
}

model TableNotification {
  id                   String              @id @default(cuid())
  businessId           String
  business             Business            @relation(fields: [businessId], references: [id], onDelete: Cascade)
  tableId              String
  table                Table               @relation(fields: [tableId], references: [id], onDelete: Cascade)
  type                 TableNotificationType
  message              String?
  paymentPreference    String?
  payAmountInput       String?
  createdAt            DateTime            @default(now())
  isResolved           Boolean             @default(false)
  resolvedAt           DateTime?
  resolvedByUserId     String?
  resolvedByUser       User?               @relation("ResolvedTableNotifications", fields: [resolvedByUserId], references: [id], onDelete: SetNull)

  @@index([businessId, tableId, createdAt])
  @@index([isResolved])
}

model Reservation {
  id                String            @id @default(cuid())
  businessId        String
  business          Business          @relation(fields: [businessId], references: [id], onDelete: Cascade)
  customerId        String?
  customer          User?             @relation("CustomerReservations", fields: [customerId], references: [id], onDelete: SetNull)
  tableId           String?
  table             Table?            @relation(fields: [tableId], references: [id], onDelete: SetNull)
  guestName         String
  guestPhone        String?
  guestEmail        String?
  dateTime          DateTime
  partySize         Int
  status            ReservationStatus @default(PENDING)
  notes             String?
  confirmationToken String?           @unique
  checkInTime       DateTime?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  
  @@index([businessId, dateTime])
  @@index([businessId, customerId])
  @@index([businessId, guestPhone])
  @@index([businessId, guestEmail])
  @@index([confirmationToken])
}