// filename: backend/prisma/schema.prisma
// --- INICIO DEL CÓDIGO COMPLETO ---
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --- ENUMS ---

enum UserRole {
  SUPER_ADMIN
  BUSINESS_ADMIN
  CUSTOMER_FINAL
}

enum DocumentType {
  DNI
  NIE
  PASSPORT
  OTHER
}

enum QrCodeStatus {
  PENDING
  COMPLETED
  EXPIRED
}

// Tier System Enums
enum TierCalculationBasis {
  SPEND
  VISITS
  POINTS_EARNED
}

enum TierDowngradePolicy {
  NEVER
  PERIODIC_REVIEW
  AFTER_INACTIVITY
}

enum BenefitType {
  POINTS_MULTIPLIER
  EXCLUSIVE_REWARD_ACCESS
  CUSTOM_BENEFIT
}


// --- MODELS ---

model Business {
  id            String    @id @default(uuid())
  name          String
  slug          String    @unique
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  pointsPerEuro Float     @default(1.0)
  currency      String    @default("EUR")
  brandingColor String?
  subscriptionStatus String @default("trial")
  trialEndsAt   DateTime?
  lastPaymentDate DateTime?

  // Relationships
  users         User[]    // One-to-Many with User
  rewards       Reward[]  // One-to-Many with Reward
  qrCodes       QrCode[]  // One-to-Many with QrCode

  // Tier System Fields
  tierSystemEnabled           Boolean?             @default(false)
  tierCalculationBasis        TierCalculationBasis?
  tierCalculationPeriodMonths Int?                 // Null = lifetime
  tierDowngradePolicy         TierDowngradePolicy? @default(NEVER)
  inactivityPeriodMonths      Int?                 // Used if policy is AFTER_INACTIVITY
  tiers                       Tier[]               // One-to-Many with Tier

  @@map("businesses")
}

model User {
  id                   String        @id @default(uuid())
  email                String        @unique
  password             String
  name                 String?
  phone                String?       @unique // Made unique
  role                 UserRole
  isActive             Boolean       @default(true)
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
  businessId           String        // Foreign Key to Business
  points               Int           @default(0)
  marketingOptIn       Boolean       @default(false)
  documentId           String?       @unique // Made unique
  documentType         DocumentType?
  resetPasswordToken   String?       @unique
  resetPasswordExpires DateTime?

  // Tier System Fields
  currentTierId     String?       // Foreign Key to Tier (nullable)
  tierAchievedAt    DateTime?     // When the current tier was achieved
  lastActivityAt    DateTime?     // Last time QR was validated
  totalSpend        Float?        @default(0)
  totalVisits       Int?          @default(0)
  totalPointsEarned Int?          @default(0)


  // Relationships
  business      Business @relation(fields: [businessId], references: [id])
  qrCodes       QrCode[] // Relation to QrCodes validated by this user
  currentTier   Tier?    @relation(fields: [currentTierId], references: [id], onDelete: SetNull) // Explicit relation to Tier


  @@map("users")
}

model Reward {
  id          String    @id @default(uuid())
  businessId  String    // Foreign Key to Business
  name        String
  description String?
  pointsCost  Int
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relationships
  business    Business @relation(fields: [businessId], references: [id])

  @@map("rewards")
}

model QrCode {
  id            String       @id @default(uuid())
  token         String       @unique
  businessId    String       // Foreign Key to Business
  amount        Float
  ticketNumber  String       // Made mandatory
  status        QrCodeStatus @default(PENDING)
  createdAt     DateTime     @default(now())
  expiresAt     DateTime
  completedAt   DateTime?
  userId        String?      // Foreign Key to User (nullable, who completed it)

  // *** NUEVO CAMPO AÑADIDO AQUÍ ***
  pointsEarned  Int?         // How many points were awarded for this specific QR scan

  // Relationships
  business    Business @relation(fields: [businessId], references: [id])
  user        User?    @relation(fields: [userId], references: [id]) // Relation to the user who validated

  @@map("qr_codes")
}


// --- TIER SYSTEM MODELS ---

model Tier {
  id                  String  @id @default(uuid())
  businessId          String  // Foreign Key to Business
  name                String  // e.g., "Bronze", "Silver", "Gold"
  level               Int     // e.g., 1, 2, 3 (lower is better/higher requirement)
  minValue            Float   // Minimum value (spend, visits, points) to reach this tier
  description         String? // User-facing description of the tier
  benefitsDescription String? // Summary of benefits for display
  isActive            Boolean @default(true)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  // Relationships
  business Business @relation(fields: [businessId], references: [id])
  users    User[]   // Users currently in this tier
  benefits TierBenefit[] // Benefits associated with this tier

  @@unique([businessId, level]) // Ensure unique level per business
  @@unique([businessId, name])  // Ensure unique name per business
}

model TierBenefit {
  id          String      @id @default(uuid())
  tierId      String      // Foreign Key to Tier
  type        BenefitType // e.g., POINTS_MULTIPLIER
  value       String      // Value of the benefit (e.g., "1.5" for multiplier, reward ID for access, text for custom)
  description String?     // Internal or admin-facing description
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relationships
  tier Tier @relation(fields: [tierId], references: [id], onDelete: Cascade) // Cascade delete if Tier is deleted
}

// --- FIN DEL CÓDIGO COMPLETO ---