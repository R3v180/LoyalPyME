// filename: backend/prisma/schema.prisma
// Version: ??? (Added GrantedReward model and relations)

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output = "./node_modules/.prisma/client" // Prisma 7+ requerirá esto probablemente
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --- ENUMS ---

enum UserRole {
  SUPER_ADMIN
  BUSINESS_ADMIN
  CUSTOMER_FINAL
}

enum DocumentType {
  DNI
  NIE
  PASSPORT
  OTHER
}

enum QrCodeStatus {
  PENDING
  COMPLETED
  EXPIRED
}

// Tier System Enums
enum TierCalculationBasis {
  SPEND
  VISITS
  POINTS_EARNED
}

enum TierDowngradePolicy {
  NEVER
  PERIODIC_REVIEW
  AFTER_INACTIVITY
}

enum BenefitType {
  POINTS_MULTIPLIER
  EXCLUSIVE_REWARD_ACCESS
  CUSTOM_BENEFIT
}


// --- MODELS ---

model Business {
  id          String    @id @default(uuid())
  name        String
  slug        String    @unique
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  pointsPerEuro Float     @default(1.0)
  currency    String    @default("EUR")
  brandingColor String?
  subscriptionStatus String @default("trial")
  trialEndsAt   DateTime?
  lastPaymentDate DateTime?

  // Relationships
  users       User[]    // One-to-Many with User
  rewards     Reward[]  // One-to-Many with Reward
  qrCodes     QrCode[]  // One-to-Many with QrCode

  // Tier System Fields
  tierSystemEnabled         Boolean?             @default(false)
  tierCalculationBasis      TierCalculationBasis?
  tierCalculationPeriodMonths Int?                 // Null = lifetime
  tierDowngradePolicy       TierDowngradePolicy? @default(NEVER)
  inactivityPeriodMonths    Int?                 // Used if policy is AFTER_INACTIVITY
  tiers                     Tier[]               // One-to-Many with Tier
  // --- NUEVA RELACIÓN AÑADIDA ---
  grantedRewards          GrantedReward[]      // Recompensas otorgadas por este negocio

  @@map("businesses")
}

model User {
  id                    String      @id @default(uuid())
  email                 String      @unique
  password              String
  name                  String?
  phone                 String?     @unique
  role                  UserRole
  isActive              Boolean     @default(true)
  isFavorite            Boolean     @default(false) // Campo añadido previamente
  createdAt             DateTime    @default(now())
  updatedAt             DateTime    @updatedAt
  businessId            String      // Foreign Key to Business
  points                Int         @default(0)
  marketingOptIn        Boolean     @default(false)
  documentId            String?     @unique
  documentType          DocumentType?
  resetPasswordToken    String?     @unique
  resetPasswordExpires  DateTime?

  // Tier System Fields
  currentTierId       String?     // Foreign Key to Tier (nullable)
  tierAchievedAt      DateTime?   // When the current tier was achieved
  lastActivityAt      DateTime?   // Last time QR was validated
  totalSpend          Float?      @default(0)
  totalVisits         Int?        @default(0)
  totalPointsEarned   Int?        @default(0)

  // --- LÍNEAS DE RELACIÓN INVERSA AÑADIDAS ---
  grantedRewards        GrantedReward[] @relation("UserGrantedRewards")   // Recompensas que le han regalado a este usuario
  assignedGrantedRewards GrantedReward[] @relation("AdminGrantedRewards") // Recompensas que este usuario (si es admin) ha regalado
  // ------------------------------------------

  // --- Relaciones existentes ---
  business    Business @relation(fields: [businessId], references: [id])
  qrCodes     QrCode[]
  currentTier Tier?    @relation(fields: [currentTierId], references: [id], onDelete: SetNull)

  @@map("users")
}

model Reward {
  id          String    @id @default(uuid())
  businessId  String    // Foreign Key to Business
  name        String
  description String?
  pointsCost  Int
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relationships
  business    Business @relation(fields: [businessId], references: [id])
  // --- NUEVA RELACIÓN AÑADIDA ---
  grantedInstances GrantedReward[] // Instancias donde esta recompensa ha sido otorgada

  @@map("rewards")
}

model QrCode {
  id            String       @id @default(uuid())
  token         String       @unique
  businessId    String       // Foreign Key to Business
  amount        Float
  ticketNumber  String
  status        QrCodeStatus @default(PENDING)
  createdAt     DateTime     @default(now())
  expiresAt     DateTime
  completedAt   DateTime?
  userId        String?      // Foreign Key to User (nullable, who completed it)
  pointsEarned  Int?

  // Relationships
  business    Business @relation(fields: [businessId], references: [id])
  user        User?    @relation(fields: [userId], references: [id])

  @@map("qr_codes")
}


// --- TIER SYSTEM MODELS (sin cambios) ---

model Tier {
  id                  String    @id @default(uuid())
  businessId          String
  name                String
  level               Int
  minValue            Float
  description         String?
  benefitsDescription String?
  isActive            Boolean   @default(true)
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  // Relationships
  business Business @relation(fields: [businessId], references: [id])
  users    User[]
  benefits TierBenefit[]

  @@unique([businessId, level])
  @@unique([businessId, name])
}

model TierBenefit {
  id          String      @id @default(uuid())
  tierId      String
  type        BenefitType
  value       String
  description String?
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relationships
  tier Tier @relation(fields: [tierId], references: [id], onDelete: Cascade)
}


// --- NUEVO MODELO AÑADIDO ---
model GrantedReward {
  id           String   @id @default(uuid())
  userId       String   // FK al Usuario que recibe el regalo
  rewardId     String   // FK a la Recompensa que se regala
  businessId   String   // FK al Negocio (para filtros y seguridad)
  assignedById String   // FK al Usuario (Admin) que hizo la asignación
  assignedAt   DateTime @default(now()) // Cuándo se asignó
  status       String   @default("PENDING") // Estado: PENDING, REDEEMED, EXPIRED?
  redeemedAt   DateTime? // Cuándo se canjeó

  // Relaciones
  user         User     @relation("UserGrantedRewards", fields: [userId], references: [id], onDelete: Cascade)
  reward       Reward   @relation(fields: [rewardId], references: [id], onDelete: Cascade)
  business     Business @relation(fields: [businessId], references: [id])
  assignedBy   User     @relation("AdminGrantedRewards", fields: [assignedById], references: [id])

  @@map("granted_rewards") // Nombre de la tabla en la BD
}
// --- FIN NUEVO MODELO ---

// --- FIN DEL CÓDIGO COMPLETO ---