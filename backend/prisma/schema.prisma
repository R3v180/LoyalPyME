// File: backend/prisma/schema.prisma
// Version: 1.0.1

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Modelos de la base de datos para LoyalPyME v1.0 y soporte QR

model Business {
  id        String    @id @default(uuid())
  name      String
  slug      String    @unique // Para URLs personalizadas o identificadores legibles
  isActive  Boolean   @default(true) // Para activar/desactivar negocios (gestión super admin)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relaciones
  users     User[] // Usuarios (empleados y clientes) de este negocio
  rewards   Reward[] // Recompensas ofrecidas por este negocio
  qrCodes   QrCode[] // Códigos QR generados para este negocio

  // Configuración básica (de momento en Business, luego podria ser tabla separada)
  pointsPerEuro Float   @default(1.0) // Cuántos puntos se dan por euro gastado
  currency      String  @default("EUR") // Moneda base, útil para expansión
  brandingColor String? // Placeholder para personalización basica UI (e.g., hex code)

  // Campos para gestión de subscripción (preparación para Super Admin)
  subscriptionStatus String @default("trial") // 'trial', 'active', 'inactive'
  trialEndsAt        DateTime?
  lastPaymentDate    DateTime?

  @@map("businesses") // Nombre real de la tabla en la BD
}

// El modelo User servirá para empleados (business_admin) y clientes finales (customer_final)
model User {
  id          String    @id @default(uuid())
  email       String    @unique
  password    String // Hash del password
  name        String?
  phone       String?
  role        UserRole // 'business_admin', 'customer_final', 'super_admin'
  isActive    Boolean   @default(true) // Para activar/desactivar usuarios
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Multi-tenancy: Relación con Business
  businessId  String
  business    Business @relation(fields: [businessId], references: [id])

  // Campos específicos para customer_final
  points      Int       @default(0) // Saldo de puntos del cliente

  // Campos para preparación futura (RGPD)
  marketingOptIn Boolean @default(false)

  // Relaciones futuras (v1.1+)
  // transactions Transaction[] // Historial de transacciones de puntos recibidas
  // rewardsRedeemed RewardRedemption[] // Historial de canjes
  // qrCodeRedemptions QrCode[] @relation("RedeemedBy") // QRCodes redimidos por este cliente (para historial)

  @@map("users") // Nombre real de la tabla en la BD
}

// Roles de usuario (para el campo 'role' en el modelo User)
enum UserRole {
  SUPER_ADMIN
  BUSINESS_ADMIN
  CUSTOMER_FINAL
}

// Modelo para las recompensas que un negocio ofrece (ej: "Cafe gratis por 100 puntos")
model Reward {
    id          String   @id @default(uuid())
    businessId  String // Multi-tenancy: A qué negocio pertenece esta recompensa
    business    Business @relation(fields: [businessId], references: [id])
    name        String
    description String?
    pointsCost  Int // Cuántos puntos cuesta canjear esta recompensa
    isActive    Boolean  @default(true)
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    // Relaciones futuras (v1.1+)
    // redemptions RewardRedemption[] // Historial de canjes de esta recompensa

    @@map("rewards") // Nombre real de la tabla en la BD
}

// NUEVO MODELO para gestionar los códigos QR de acumulación de puntos (v1.0)
model QrCode {
    id           String    @id @default(uuid())
    token        String    @unique // El token unico que se incluira en el QR
    businessId   String    // A que negocio pertenece este QR
    business     Business  @relation(fields: [businessId], references: [id])
    amount       Float     // Importe total de la venta asociado a este QR
    ticketNumber String?   // Numero de ticket de la venta (opcional)
    status       QrCodeStatus @default(PENDING) // Estado del QR: PENDING, COMPLETED, EXPIRED
    createdAt    DateTime  @default(now()) // Cuando se genero el QR
    expiresAt    DateTime  // Cuando expira el QR
    completedAt  DateTime? // Cuando fue redimido (si status es COMPLETED)

    // Relacion al usuario que redimio este QR (opcional, futuro si queremos historial)
    // redeemedById String?
    // redeemedBy   User?     @relation("RedeemedBy", fields: [redeemedById], references: [id])


    @@map("qr_codes") // Nombre real de la tabla en la BD
}

// Estados posibles para un QrCode
enum QrCodeStatus {
    PENDING
    COMPLETED
    EXPIRED
}


// --- Modelos Futuros (Post-v1.0), dejados como referencia ---
// model Transaction { ... }
// model RewardRedemption { ... }
// model Product { ... }
// model TransactionItem { ... }
// model Tier { ... }
// model TierBenefit { ... }
// model CustomerFeedback { ... }
// model InternalNote { ... }